
alarm_clock.elf:     file format elf32-littlenios2
alarm_clock.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004180

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00000f98 memsz 0x00000f98 flags r-x
    LOAD off    0x00001fb8 vaddr 0x00004fb8 paddr 0x000050ac align 2**12
         filesz 0x000000f4 memsz 0x000000f4 flags rw-
    LOAD off    0x000021a0 vaddr 0x000051a0 paddr 0x000051a0 align 2**12
         filesz 0x00000000 memsz 0x0000011c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000dd4  00004180  00004180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000064  00004f54  00004f54  00001f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f4  00004fb8  000050ac  00001fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000011c  000051a0  000051a0  000021a0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000052bc  000052bc  000020ac  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000020ac  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000003c0  00000000  00000000  000020d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000469b  00000000  00000000  00002490  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001a11  00000000  00000000  00006b2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001c03  00000000  00000000  0000853c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000004b8  00000000  00000000  0000a140  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001618  00000000  00000000  0000a5f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000177c  00000000  00000000  0000bc10  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000d38c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002c0  00000000  00000000  0000d3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000e9da  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000e9dd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000e9e9  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000e9ea  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  0000e9eb  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  0000e9ef  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  0000e9f3  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000005  00000000  00000000  0000e9f7  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000037  00000000  00000000  0000e9fc  2**0
                  CONTENTS, READONLY
 26 .jdi          0000381a  00000000  00000000  0000ea33  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0005020e  00000000  00000000  0001224d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004180 l    d  .text	00000000 .text
00004f54 l    d  .rodata	00000000 .rodata
00004fb8 l    d  .rwdata	00000000 .rwdata
000051a0 l    d  .bss	00000000 .bss
000052bc l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../alarm_clock_bsp//obj/HAL/src/crt0.o
000041b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
000041bc l     F .text	00000020 timer_isr
000051a0 l     O .bss	00000004 count.2603
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00004378 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00004fb8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
000051b8 g     O .bss	00000004 alt_instruction_exception_handler
00004dec g     F .text	0000002c alt_main
000042c8 g     F .text	00000080 _puts_r
000051bc g     O .bss	00000100 alt_irq
000050ac g       *ABS*	00000000 __flash_rwdata_start
0000427c g     F .text	0000004c printf
00004f4c g     F .text	00000008 altera_nios2_gen2_irq_init
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
000051a4 g     O .bss	00000004 errno
000051b0 g     O .bss	00000004 alt_argv
0000d098 g       *ABS*	00000000 _gp
000050a4 g     O .rwdata	00000004 jtag
00004348 g     F .text	00000014 puts
00004ed8 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00004240 g     F .text	0000003c _printf_r
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00004b34 g     F .text	00000064 .hidden __udivsi3
00005098 g     O .rwdata	00000004 _global_impure_ptr
000052bc g       *ABS*	00000000 __bss_end
00004ca4 g     F .text	00000068 alt_iic_isr_register
00004c8c g     F .text	00000018 alt_ic_irq_enabled
000051a8 g     O .bss	00000004 alt_irq_active
000040fc g     F .exceptions	00000060 alt_irq_handler
00004ed0 g     F .text	00000004 alt_dcache_flush_all
000050ac g       *ABS*	00000000 __ram_rwdata_end
00004e18 g     F .text	00000060 write
00004fb8 g       *ABS*	00000000 __ram_rodata_end
00004b98 g     F .text	00000058 .hidden __umodsi3
000052bc g       *ABS*	00000000 end
0000415c g     F .exceptions	00000024 alt_instruction_exception_entry
00007ff4 g       *ABS*	00000000 __alt_stack_pointer
00004e9c g     F .text	00000034 altera_avalon_jtag_uart_write
000043e4 g     F .text	0000052c ___vfprintf_internal_r
000041dc g     F .text	0000003c init_timer_interrupt
00004180 g     F .text	0000003c _start
00004e98 g     F .text	00000004 alt_sys_init
00004bf0 g     F .text	00000028 .hidden __mulsi3
00004fb8 g       *ABS*	00000000 __ram_rwdata_start
00004f54 g       *ABS*	00000000 __ram_rodata_start
000052bc g       *ABS*	00000000 __alt_stack_base
0000492c g     F .text	000000b8 __sfvwrite_small_dev
000051a0 g       *ABS*	00000000 __bss_start
00004218 g     F .text	00000028 main
000051ac g     O .bss	00000004 alt_envp
000050a8 g     O .rwdata	00000004 alt_errno
00004a3c g     F .text	00000084 .hidden __divsi3
00004f54 g       *ABS*	00000000 __flash_rodata_start
00004e78 g     F .text	00000020 alt_irq_init
000049e4 g     F .text	00000058 _write_r
0000509c g     O .rwdata	00000004 _impure_ptr
000051b4 g     O .bss	00000004 alt_argc
00004020 g       .exceptions	00000000 alt_irq_entry
00004020 g       *ABS*	00000000 __ram_exceptions_start
00004c18 g     F .text	00000004 alt_ic_isr_register
000050ac g       *ABS*	00000000 _edata
000052bc g       *ABS*	00000000 _end
00004180 g       *ABS*	00000000 __ram_exceptions_end
00004c54 g     F .text	00000038 alt_ic_irq_disable
00004ac0 g     F .text	00000074 .hidden __modsi3
00007ff4 g       *ABS*	00000000 __alt_data_end
00004020 g     F .exceptions	00000000 alt_exception
0000400c g       .entry	00000000 _exit
0000435c g     F .text	0000001c strlen
00004ed4 g     F .text	00000004 alt_icache_flush_all
000050a0 g     O .rwdata	00000004 alt_priority_mask
00004c1c g     F .text	00000038 alt_ic_irq_enable
00004910 g     F .text	0000001c __vfprintf_internal
00004d0c g     F .text	000000e0 alt_load



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08506014 	ori	at,at,16768
    jmp r1
    4008:	0800683a 	jmp	at

0000400c <_exit>:
	...

Disassembly of section .exceptions:

00004020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    4020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    4024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    4028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    4030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    4034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    4038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    4040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    4044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    4048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    4050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    4054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    4058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    4060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    4064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    4068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    4070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    4074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    4078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    407c:	10000326 	beq	r2,zero,408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    4080:	20000226 	beq	r4,zero,408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    4084:	00040fc0 	call	40fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    4088:	00000706 	br	40a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    408c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    4090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    4094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    4098:	000415c0 	call	415c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    409c:	1000021e 	bne	r2,zero,40a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    40a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    40a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    40a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    40ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    40b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    40b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    40b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    40bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    40c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    40c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    40c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    40cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    40d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    40d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    40d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    40dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    40e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    40e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    40e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    40ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    40f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    40f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    40f8:	ef80083a 	eret

000040fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    40fc:	defffe04 	addi	sp,sp,-8
    4100:	dfc00115 	stw	ra,4(sp)
    4104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    4108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    410c:	04000034 	movhi	r16,0
    4110:	84146f04 	addi	r16,r16,20924

  active = alt_irq_pending ();

  do
  {
    i = 0;
    4114:	0005883a 	mov	r2,zero
    mask = 1;
    4118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    411c:	20ca703a 	and	r5,r4,r3
    4120:	28000b26 	beq	r5,zero,4150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    4124:	100490fa 	slli	r2,r2,3
    4128:	8085883a 	add	r2,r16,r2
    412c:	10c00017 	ldw	r3,0(r2)
    4130:	11000117 	ldw	r4,4(r2)
    4134:	183ee83a 	callr	r3
    4138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    413c:	203ff51e 	bne	r4,zero,4114 <_gp+0xffff707c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    4140:	dfc00117 	ldw	ra,4(sp)
    4144:	dc000017 	ldw	r16,0(sp)
    4148:	dec00204 	addi	sp,sp,8
    414c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    4150:	18c7883a 	add	r3,r3,r3
      i++;
    4154:	10800044 	addi	r2,r2,1

    } while (1);
    4158:	003ff006 	br	411c <_gp+0xffff7084>

0000415c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    415c:	d0a04817 	ldw	r2,-32480(gp)
    4160:	10000426 	beq	r2,zero,4174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    4164:	200b883a 	mov	r5,r4
    4168:	000d883a 	mov	r6,zero
    416c:	013fffc4 	movi	r4,-1
    4170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    4174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
    4178:	0005883a 	mov	r2,zero
    417c:	f800283a 	ret

Disassembly of section .text:

00004180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4180:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4184:	dedffd14 	ori	sp,sp,32756
    movhi gp, %hi(_gp)
    4188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    418c:	d6b42614 	ori	gp,gp,53400
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4194:	10946814 	ori	r2,r2,20896

    movhi r3, %hi(__bss_end)
    4198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    419c:	18d4af14 	ori	r3,r3,21180

    beq r2, r3, 1f
    41a0:	10c00326 	beq	r2,r3,41b0 <_start+0x30>

0:
    stw zero, (r2)
    41a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    41a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    41ac:	10fffd36 	bltu	r2,r3,41a4 <_gp+0xffff710c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    41b0:	0004d0c0 	call	4d0c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    41b4:	0004dec0 	call	4dec <alt_main>

000041b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    41b8:	003fff06 	br	41b8 <_gp+0xffff7120>

000041bc <timer_isr>:
												ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
}
static void timer_isr(void * context, alt_u32 id){
	static int count = 0;
	// Clear the interrupt
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
    41bc:	00a40014 	movui	r2,36864
    41c0:	10000035 	stwio	zero,0(r2)
	// Do something
	printf("\nTimer Expired: %d", count++);
    41c4:	d1604217 	ldw	r5,-32504(gp)
    41c8:	01000034 	movhi	r4,0
    41cc:	2113d504 	addi	r4,r4,20308
    41d0:	28800044 	addi	r2,r5,1
    41d4:	d0a04215 	stw	r2,-32504(gp)
    41d8:	000427c1 	jmpi	427c <printf>

000041dc <init_timer_interrupt>:
  }

  return 0;
}

void init_timer_interrupt(void){
    41dc:	defffe04 	addi	sp,sp,-8
	// Register the ISR with HAL
	alt_ic_isr_register(TIMER_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_IRQ, (void *)timer_isr, NULL, 0x0);
    41e0:	01800034 	movhi	r6,0
    41e4:	d8000015 	stw	zero,0(sp)
    41e8:	000f883a 	mov	r7,zero
    41ec:	31906f04 	addi	r6,r6,16828
    41f0:	000b883a 	mov	r5,zero
    41f4:	0009883a 	mov	r4,zero
  }

  return 0;
}

void init_timer_interrupt(void){
    41f8:	dfc00115 	stw	ra,4(sp)
	// Register the ISR with HAL
	alt_ic_isr_register(TIMER_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_IRQ, (void *)timer_isr, NULL, 0x0);
    41fc:	0004c180 	call	4c18 <alt_ic_isr_register>
	// Start the timer
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK|
    4200:	00a40114 	movui	r2,36868
    4204:	00c001c4 	movi	r3,7
    4208:	10c00035 	stwio	r3,0(r2)
												ALTERA_AVALON_TIMER_CONTROL_START_MSK|
												ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
}
    420c:	dfc00117 	ldw	ra,4(sp)
    4210:	dec00204 	addi	sp,sp,8
    4214:	f800283a 	ret

00004218 <main>:
void init_timer_interrupt(void);
static void timer_isr(void * context, alt_u32 id);

int main(void)
{ 
  printf("Hello from NIOS II\n");
    4218:	01000034 	movhi	r4,0

void init_timer_interrupt(void);
static void timer_isr(void * context, alt_u32 id);

int main(void)
{ 
    421c:	deffff04 	addi	sp,sp,-4
  printf("Hello from NIOS II\n");
    4220:	2113da04 	addi	r4,r4,20328

void init_timer_interrupt(void);
static void timer_isr(void * context, alt_u32 id);

int main(void)
{ 
    4224:	dfc00015 	stw	ra,0(sp)
  printf("Hello from NIOS II\n");
    4228:	00043480 	call	4348 <puts>
  printf("This in an interrupt example using an interval timer\n");
    422c:	01000034 	movhi	r4,0
    4230:	2113df04 	addi	r4,r4,20348
    4234:	00043480 	call	4348 <puts>

  //Enable the timer
  init_timer_interrupt();
    4238:	00041dc0 	call	41dc <init_timer_interrupt>
    423c:	003fff06 	br	423c <_gp+0xffff71a4>

00004240 <_printf_r>:
    4240:	defffd04 	addi	sp,sp,-12
    4244:	dfc00015 	stw	ra,0(sp)
    4248:	d9800115 	stw	r6,4(sp)
    424c:	d9c00215 	stw	r7,8(sp)
    4250:	20c00217 	ldw	r3,8(r4)
    4254:	01800034 	movhi	r6,0
    4258:	31924b04 	addi	r6,r6,18732
    425c:	19800115 	stw	r6,4(r3)
    4260:	280d883a 	mov	r6,r5
    4264:	21400217 	ldw	r5,8(r4)
    4268:	d9c00104 	addi	r7,sp,4
    426c:	00043e40 	call	43e4 <___vfprintf_internal_r>
    4270:	dfc00017 	ldw	ra,0(sp)
    4274:	dec00304 	addi	sp,sp,12
    4278:	f800283a 	ret

0000427c <printf>:
    427c:	defffc04 	addi	sp,sp,-16
    4280:	dfc00015 	stw	ra,0(sp)
    4284:	d9400115 	stw	r5,4(sp)
    4288:	d9800215 	stw	r6,8(sp)
    428c:	d9c00315 	stw	r7,12(sp)
    4290:	00800034 	movhi	r2,0
    4294:	10942704 	addi	r2,r2,20636
    4298:	10800017 	ldw	r2,0(r2)
    429c:	01400034 	movhi	r5,0
    42a0:	29524b04 	addi	r5,r5,18732
    42a4:	10c00217 	ldw	r3,8(r2)
    42a8:	d9800104 	addi	r6,sp,4
    42ac:	19400115 	stw	r5,4(r3)
    42b0:	200b883a 	mov	r5,r4
    42b4:	11000217 	ldw	r4,8(r2)
    42b8:	00049100 	call	4910 <__vfprintf_internal>
    42bc:	dfc00017 	ldw	ra,0(sp)
    42c0:	dec00404 	addi	sp,sp,16
    42c4:	f800283a 	ret

000042c8 <_puts_r>:
    42c8:	defffd04 	addi	sp,sp,-12
    42cc:	dc000015 	stw	r16,0(sp)
    42d0:	2021883a 	mov	r16,r4
    42d4:	2809883a 	mov	r4,r5
    42d8:	dfc00215 	stw	ra,8(sp)
    42dc:	dc400115 	stw	r17,4(sp)
    42e0:	2823883a 	mov	r17,r5
    42e4:	000435c0 	call	435c <strlen>
    42e8:	81400217 	ldw	r5,8(r16)
    42ec:	01000034 	movhi	r4,0
    42f0:	21124b04 	addi	r4,r4,18732
    42f4:	29000115 	stw	r4,4(r5)
    42f8:	100f883a 	mov	r7,r2
    42fc:	880d883a 	mov	r6,r17
    4300:	8009883a 	mov	r4,r16
    4304:	000492c0 	call	492c <__sfvwrite_small_dev>
    4308:	00ffffc4 	movi	r3,-1
    430c:	10c00926 	beq	r2,r3,4334 <_puts_r+0x6c>
    4310:	81400217 	ldw	r5,8(r16)
    4314:	01800034 	movhi	r6,0
    4318:	01c00044 	movi	r7,1
    431c:	28800117 	ldw	r2,4(r5)
    4320:	3193ed04 	addi	r6,r6,20404
    4324:	8009883a 	mov	r4,r16
    4328:	103ee83a 	callr	r2
    432c:	10bfffe0 	cmpeqi	r2,r2,-1
    4330:	0085c83a 	sub	r2,zero,r2
    4334:	dfc00217 	ldw	ra,8(sp)
    4338:	dc400117 	ldw	r17,4(sp)
    433c:	dc000017 	ldw	r16,0(sp)
    4340:	dec00304 	addi	sp,sp,12
    4344:	f800283a 	ret

00004348 <puts>:
    4348:	00800034 	movhi	r2,0
    434c:	10942704 	addi	r2,r2,20636
    4350:	200b883a 	mov	r5,r4
    4354:	11000017 	ldw	r4,0(r2)
    4358:	00042c81 	jmpi	42c8 <_puts_r>

0000435c <strlen>:
    435c:	2005883a 	mov	r2,r4
    4360:	10c00007 	ldb	r3,0(r2)
    4364:	18000226 	beq	r3,zero,4370 <strlen+0x14>
    4368:	10800044 	addi	r2,r2,1
    436c:	003ffc06 	br	4360 <_gp+0xffff72c8>
    4370:	1105c83a 	sub	r2,r2,r4
    4374:	f800283a 	ret

00004378 <print_repeat>:
    4378:	defffb04 	addi	sp,sp,-20
    437c:	dc800315 	stw	r18,12(sp)
    4380:	dc400215 	stw	r17,8(sp)
    4384:	dc000115 	stw	r16,4(sp)
    4388:	dfc00415 	stw	ra,16(sp)
    438c:	2025883a 	mov	r18,r4
    4390:	2823883a 	mov	r17,r5
    4394:	d9800005 	stb	r6,0(sp)
    4398:	3821883a 	mov	r16,r7
    439c:	04000a0e 	bge	zero,r16,43c8 <print_repeat+0x50>
    43a0:	88800117 	ldw	r2,4(r17)
    43a4:	01c00044 	movi	r7,1
    43a8:	d80d883a 	mov	r6,sp
    43ac:	880b883a 	mov	r5,r17
    43b0:	9009883a 	mov	r4,r18
    43b4:	103ee83a 	callr	r2
    43b8:	843fffc4 	addi	r16,r16,-1
    43bc:	103ff726 	beq	r2,zero,439c <_gp+0xffff7304>
    43c0:	00bfffc4 	movi	r2,-1
    43c4:	00000106 	br	43cc <print_repeat+0x54>
    43c8:	0005883a 	mov	r2,zero
    43cc:	dfc00417 	ldw	ra,16(sp)
    43d0:	dc800317 	ldw	r18,12(sp)
    43d4:	dc400217 	ldw	r17,8(sp)
    43d8:	dc000117 	ldw	r16,4(sp)
    43dc:	dec00504 	addi	sp,sp,20
    43e0:	f800283a 	ret

000043e4 <___vfprintf_internal_r>:
    43e4:	deffe504 	addi	sp,sp,-108
    43e8:	d8c00804 	addi	r3,sp,32
    43ec:	ddc01815 	stw	r23,96(sp)
    43f0:	dd801715 	stw	r22,92(sp)
    43f4:	dd401615 	stw	r21,88(sp)
    43f8:	dd001515 	stw	r20,84(sp)
    43fc:	dcc01415 	stw	r19,80(sp)
    4400:	dc801315 	stw	r18,76(sp)
    4404:	dc401215 	stw	r17,72(sp)
    4408:	dc001115 	stw	r16,68(sp)
    440c:	dfc01a15 	stw	ra,104(sp)
    4410:	df001915 	stw	fp,100(sp)
    4414:	2029883a 	mov	r20,r4
    4418:	2823883a 	mov	r17,r5
    441c:	382d883a 	mov	r22,r7
    4420:	d9800f15 	stw	r6,60(sp)
    4424:	0021883a 	mov	r16,zero
    4428:	d8000e15 	stw	zero,56(sp)
    442c:	d8000a15 	stw	zero,40(sp)
    4430:	002b883a 	mov	r21,zero
    4434:	0027883a 	mov	r19,zero
    4438:	0025883a 	mov	r18,zero
    443c:	d8000c15 	stw	zero,48(sp)
    4440:	d8000b15 	stw	zero,44(sp)
    4444:	002f883a 	mov	r23,zero
    4448:	d8c00915 	stw	r3,36(sp)
    444c:	d8c00f17 	ldw	r3,60(sp)
    4450:	19000003 	ldbu	r4,0(r3)
    4454:	20803fcc 	andi	r2,r4,255
    4458:	1080201c 	xori	r2,r2,128
    445c:	10bfe004 	addi	r2,r2,-128
    4460:	10011e26 	beq	r2,zero,48dc <___vfprintf_internal_r+0x4f8>
    4464:	00c00044 	movi	r3,1
    4468:	b8c01426 	beq	r23,r3,44bc <___vfprintf_internal_r+0xd8>
    446c:	1dc00216 	blt	r3,r23,4478 <___vfprintf_internal_r+0x94>
    4470:	b8000626 	beq	r23,zero,448c <___vfprintf_internal_r+0xa8>
    4474:	00011506 	br	48cc <___vfprintf_internal_r+0x4e8>
    4478:	01400084 	movi	r5,2
    447c:	b9401d26 	beq	r23,r5,44f4 <___vfprintf_internal_r+0x110>
    4480:	014000c4 	movi	r5,3
    4484:	b9402b26 	beq	r23,r5,4534 <___vfprintf_internal_r+0x150>
    4488:	00011006 	br	48cc <___vfprintf_internal_r+0x4e8>
    448c:	01400944 	movi	r5,37
    4490:	1140fc26 	beq	r2,r5,4884 <___vfprintf_internal_r+0x4a0>
    4494:	88800117 	ldw	r2,4(r17)
    4498:	d9000005 	stb	r4,0(sp)
    449c:	01c00044 	movi	r7,1
    44a0:	d80d883a 	mov	r6,sp
    44a4:	880b883a 	mov	r5,r17
    44a8:	a009883a 	mov	r4,r20
    44ac:	103ee83a 	callr	r2
    44b0:	1000d81e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x430>
    44b4:	84000044 	addi	r16,r16,1
    44b8:	00010406 	br	48cc <___vfprintf_internal_r+0x4e8>
    44bc:	01400c04 	movi	r5,48
    44c0:	1140fa26 	beq	r2,r5,48ac <___vfprintf_internal_r+0x4c8>
    44c4:	01400944 	movi	r5,37
    44c8:	11400a1e 	bne	r2,r5,44f4 <___vfprintf_internal_r+0x110>
    44cc:	d8800005 	stb	r2,0(sp)
    44d0:	88800117 	ldw	r2,4(r17)
    44d4:	b80f883a 	mov	r7,r23
    44d8:	d80d883a 	mov	r6,sp
    44dc:	880b883a 	mov	r5,r17
    44e0:	a009883a 	mov	r4,r20
    44e4:	103ee83a 	callr	r2
    44e8:	1000ca1e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x430>
    44ec:	84000044 	addi	r16,r16,1
    44f0:	0000f506 	br	48c8 <___vfprintf_internal_r+0x4e4>
    44f4:	25fff404 	addi	r23,r4,-48
    44f8:	bdc03fcc 	andi	r23,r23,255
    44fc:	00c00244 	movi	r3,9
    4500:	1dc00936 	bltu	r3,r23,4528 <___vfprintf_internal_r+0x144>
    4504:	00bfffc4 	movi	r2,-1
    4508:	90800426 	beq	r18,r2,451c <___vfprintf_internal_r+0x138>
    450c:	01400284 	movi	r5,10
    4510:	9009883a 	mov	r4,r18
    4514:	0004bf00 	call	4bf0 <__mulsi3>
    4518:	00000106 	br	4520 <___vfprintf_internal_r+0x13c>
    451c:	0005883a 	mov	r2,zero
    4520:	b8a5883a 	add	r18,r23,r2
    4524:	0000e206 	br	48b0 <___vfprintf_internal_r+0x4cc>
    4528:	01400b84 	movi	r5,46
    452c:	1140e426 	beq	r2,r5,48c0 <___vfprintf_internal_r+0x4dc>
    4530:	05c00084 	movi	r23,2
    4534:	213ff404 	addi	r4,r4,-48
    4538:	27003fcc 	andi	fp,r4,255
    453c:	00c00244 	movi	r3,9
    4540:	1f000936 	bltu	r3,fp,4568 <___vfprintf_internal_r+0x184>
    4544:	00bfffc4 	movi	r2,-1
    4548:	98800426 	beq	r19,r2,455c <___vfprintf_internal_r+0x178>
    454c:	01400284 	movi	r5,10
    4550:	9809883a 	mov	r4,r19
    4554:	0004bf00 	call	4bf0 <__mulsi3>
    4558:	00000106 	br	4560 <___vfprintf_internal_r+0x17c>
    455c:	0005883a 	mov	r2,zero
    4560:	e0a7883a 	add	r19,fp,r2
    4564:	0000d906 	br	48cc <___vfprintf_internal_r+0x4e8>
    4568:	00c01b04 	movi	r3,108
    456c:	10c0d226 	beq	r2,r3,48b8 <___vfprintf_internal_r+0x4d4>
    4570:	013fffc4 	movi	r4,-1
    4574:	99000226 	beq	r19,r4,4580 <___vfprintf_internal_r+0x19c>
    4578:	d8000b15 	stw	zero,44(sp)
    457c:	00000106 	br	4584 <___vfprintf_internal_r+0x1a0>
    4580:	04c00044 	movi	r19,1
    4584:	01001a44 	movi	r4,105
    4588:	11001626 	beq	r2,r4,45e4 <___vfprintf_internal_r+0x200>
    458c:	20800916 	blt	r4,r2,45b4 <___vfprintf_internal_r+0x1d0>
    4590:	010018c4 	movi	r4,99
    4594:	11008826 	beq	r2,r4,47b8 <___vfprintf_internal_r+0x3d4>
    4598:	01001904 	movi	r4,100
    459c:	11001126 	beq	r2,r4,45e4 <___vfprintf_internal_r+0x200>
    45a0:	01001604 	movi	r4,88
    45a4:	1100c81e 	bne	r2,r4,48c8 <___vfprintf_internal_r+0x4e4>
    45a8:	00c00044 	movi	r3,1
    45ac:	d8c00e15 	stw	r3,56(sp)
    45b0:	00001506 	br	4608 <___vfprintf_internal_r+0x224>
    45b4:	01001cc4 	movi	r4,115
    45b8:	11009826 	beq	r2,r4,481c <___vfprintf_internal_r+0x438>
    45bc:	20800416 	blt	r4,r2,45d0 <___vfprintf_internal_r+0x1ec>
    45c0:	01001bc4 	movi	r4,111
    45c4:	1100c01e 	bne	r2,r4,48c8 <___vfprintf_internal_r+0x4e4>
    45c8:	05400204 	movi	r21,8
    45cc:	00000f06 	br	460c <___vfprintf_internal_r+0x228>
    45d0:	01001d44 	movi	r4,117
    45d4:	11000d26 	beq	r2,r4,460c <___vfprintf_internal_r+0x228>
    45d8:	01001e04 	movi	r4,120
    45dc:	11000a26 	beq	r2,r4,4608 <___vfprintf_internal_r+0x224>
    45e0:	0000b906 	br	48c8 <___vfprintf_internal_r+0x4e4>
    45e4:	d8c00a17 	ldw	r3,40(sp)
    45e8:	b7000104 	addi	fp,r22,4
    45ec:	18000726 	beq	r3,zero,460c <___vfprintf_internal_r+0x228>
    45f0:	df000d15 	stw	fp,52(sp)
    45f4:	b5c00017 	ldw	r23,0(r22)
    45f8:	b800080e 	bge	r23,zero,461c <___vfprintf_internal_r+0x238>
    45fc:	05efc83a 	sub	r23,zero,r23
    4600:	02400044 	movi	r9,1
    4604:	00000606 	br	4620 <___vfprintf_internal_r+0x23c>
    4608:	05400404 	movi	r21,16
    460c:	b0c00104 	addi	r3,r22,4
    4610:	d8c00d15 	stw	r3,52(sp)
    4614:	b5c00017 	ldw	r23,0(r22)
    4618:	d8000a15 	stw	zero,40(sp)
    461c:	0013883a 	mov	r9,zero
    4620:	d839883a 	mov	fp,sp
    4624:	b8001726 	beq	r23,zero,4684 <___vfprintf_internal_r+0x2a0>
    4628:	a80b883a 	mov	r5,r21
    462c:	b809883a 	mov	r4,r23
    4630:	da401015 	stw	r9,64(sp)
    4634:	0004b340 	call	4b34 <__udivsi3>
    4638:	a80b883a 	mov	r5,r21
    463c:	1009883a 	mov	r4,r2
    4640:	102d883a 	mov	r22,r2
    4644:	0004bf00 	call	4bf0 <__mulsi3>
    4648:	b885c83a 	sub	r2,r23,r2
    464c:	00c00244 	movi	r3,9
    4650:	da401017 	ldw	r9,64(sp)
    4654:	18800216 	blt	r3,r2,4660 <___vfprintf_internal_r+0x27c>
    4658:	10800c04 	addi	r2,r2,48
    465c:	00000506 	br	4674 <___vfprintf_internal_r+0x290>
    4660:	d8c00e17 	ldw	r3,56(sp)
    4664:	18000226 	beq	r3,zero,4670 <___vfprintf_internal_r+0x28c>
    4668:	10800dc4 	addi	r2,r2,55
    466c:	00000106 	br	4674 <___vfprintf_internal_r+0x290>
    4670:	108015c4 	addi	r2,r2,87
    4674:	e0800005 	stb	r2,0(fp)
    4678:	b02f883a 	mov	r23,r22
    467c:	e7000044 	addi	fp,fp,1
    4680:	003fe806 	br	4624 <_gp+0xffff758c>
    4684:	e6efc83a 	sub	r23,fp,sp
    4688:	9dc5c83a 	sub	r2,r19,r23
    468c:	0080090e 	bge	zero,r2,46b4 <___vfprintf_internal_r+0x2d0>
    4690:	e085883a 	add	r2,fp,r2
    4694:	01400c04 	movi	r5,48
    4698:	d8c00917 	ldw	r3,36(sp)
    469c:	e009883a 	mov	r4,fp
    46a0:	e0c0032e 	bgeu	fp,r3,46b0 <___vfprintf_internal_r+0x2cc>
    46a4:	e7000044 	addi	fp,fp,1
    46a8:	21400005 	stb	r5,0(r4)
    46ac:	e0bffa1e 	bne	fp,r2,4698 <_gp+0xffff7600>
    46b0:	e6efc83a 	sub	r23,fp,sp
    46b4:	d8c00b17 	ldw	r3,44(sp)
    46b8:	4dd1883a 	add	r8,r9,r23
    46bc:	922dc83a 	sub	r22,r18,r8
    46c0:	18001626 	beq	r3,zero,471c <___vfprintf_internal_r+0x338>
    46c4:	48000a26 	beq	r9,zero,46f0 <___vfprintf_internal_r+0x30c>
    46c8:	00800b44 	movi	r2,45
    46cc:	d8800805 	stb	r2,32(sp)
    46d0:	88800117 	ldw	r2,4(r17)
    46d4:	01c00044 	movi	r7,1
    46d8:	d9800804 	addi	r6,sp,32
    46dc:	880b883a 	mov	r5,r17
    46e0:	a009883a 	mov	r4,r20
    46e4:	103ee83a 	callr	r2
    46e8:	10004a1e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x430>
    46ec:	84000044 	addi	r16,r16,1
    46f0:	0580070e 	bge	zero,r22,4710 <___vfprintf_internal_r+0x32c>
    46f4:	b00f883a 	mov	r7,r22
    46f8:	01800c04 	movi	r6,48
    46fc:	880b883a 	mov	r5,r17
    4700:	a009883a 	mov	r4,r20
    4704:	00043780 	call	4378 <print_repeat>
    4708:	1000421e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x430>
    470c:	85a1883a 	add	r16,r16,r22
    4710:	e02d883a 	mov	r22,fp
    4714:	bf2fc83a 	sub	r23,r23,fp
    4718:	00002006 	br	479c <___vfprintf_internal_r+0x3b8>
    471c:	0580090e 	bge	zero,r22,4744 <___vfprintf_internal_r+0x360>
    4720:	b00f883a 	mov	r7,r22
    4724:	01800804 	movi	r6,32
    4728:	880b883a 	mov	r5,r17
    472c:	a009883a 	mov	r4,r20
    4730:	da401015 	stw	r9,64(sp)
    4734:	00043780 	call	4378 <print_repeat>
    4738:	da401017 	ldw	r9,64(sp)
    473c:	1000351e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x430>
    4740:	85a1883a 	add	r16,r16,r22
    4744:	483ff226 	beq	r9,zero,4710 <_gp+0xffff7678>
    4748:	00800b44 	movi	r2,45
    474c:	d8800805 	stb	r2,32(sp)
    4750:	88800117 	ldw	r2,4(r17)
    4754:	01c00044 	movi	r7,1
    4758:	d9800804 	addi	r6,sp,32
    475c:	880b883a 	mov	r5,r17
    4760:	a009883a 	mov	r4,r20
    4764:	103ee83a 	callr	r2
    4768:	10002a1e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x430>
    476c:	84000044 	addi	r16,r16,1
    4770:	003fe706 	br	4710 <_gp+0xffff7678>
    4774:	b5bfffc4 	addi	r22,r22,-1
    4778:	b0800003 	ldbu	r2,0(r22)
    477c:	01c00044 	movi	r7,1
    4780:	d9800804 	addi	r6,sp,32
    4784:	d8800805 	stb	r2,32(sp)
    4788:	88800117 	ldw	r2,4(r17)
    478c:	880b883a 	mov	r5,r17
    4790:	a009883a 	mov	r4,r20
    4794:	103ee83a 	callr	r2
    4798:	10001e1e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x430>
    479c:	8585c83a 	sub	r2,r16,r22
    47a0:	b5c9883a 	add	r4,r22,r23
    47a4:	e085883a 	add	r2,fp,r2
    47a8:	013ff216 	blt	zero,r4,4774 <_gp+0xffff76dc>
    47ac:	1021883a 	mov	r16,r2
    47b0:	dd800d17 	ldw	r22,52(sp)
    47b4:	00004406 	br	48c8 <___vfprintf_internal_r+0x4e4>
    47b8:	00800044 	movi	r2,1
    47bc:	1480080e 	bge	r2,r18,47e0 <___vfprintf_internal_r+0x3fc>
    47c0:	95ffffc4 	addi	r23,r18,-1
    47c4:	b80f883a 	mov	r7,r23
    47c8:	01800804 	movi	r6,32
    47cc:	880b883a 	mov	r5,r17
    47d0:	a009883a 	mov	r4,r20
    47d4:	00043780 	call	4378 <print_repeat>
    47d8:	10000e1e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x430>
    47dc:	85e1883a 	add	r16,r16,r23
    47e0:	b0800017 	ldw	r2,0(r22)
    47e4:	01c00044 	movi	r7,1
    47e8:	d80d883a 	mov	r6,sp
    47ec:	d8800005 	stb	r2,0(sp)
    47f0:	88800117 	ldw	r2,4(r17)
    47f4:	880b883a 	mov	r5,r17
    47f8:	a009883a 	mov	r4,r20
    47fc:	b5c00104 	addi	r23,r22,4
    4800:	103ee83a 	callr	r2
    4804:	1000031e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x430>
    4808:	84000044 	addi	r16,r16,1
    480c:	b82d883a 	mov	r22,r23
    4810:	00002d06 	br	48c8 <___vfprintf_internal_r+0x4e4>
    4814:	00bfffc4 	movi	r2,-1
    4818:	00003106 	br	48e0 <___vfprintf_internal_r+0x4fc>
    481c:	b5c00017 	ldw	r23,0(r22)
    4820:	b7000104 	addi	fp,r22,4
    4824:	b809883a 	mov	r4,r23
    4828:	000435c0 	call	435c <strlen>
    482c:	9091c83a 	sub	r8,r18,r2
    4830:	102d883a 	mov	r22,r2
    4834:	0200090e 	bge	zero,r8,485c <___vfprintf_internal_r+0x478>
    4838:	400f883a 	mov	r7,r8
    483c:	01800804 	movi	r6,32
    4840:	880b883a 	mov	r5,r17
    4844:	a009883a 	mov	r4,r20
    4848:	da001015 	stw	r8,64(sp)
    484c:	00043780 	call	4378 <print_repeat>
    4850:	da001017 	ldw	r8,64(sp)
    4854:	103fef1e 	bne	r2,zero,4814 <_gp+0xffff777c>
    4858:	8221883a 	add	r16,r16,r8
    485c:	88800117 	ldw	r2,4(r17)
    4860:	b00f883a 	mov	r7,r22
    4864:	b80d883a 	mov	r6,r23
    4868:	880b883a 	mov	r5,r17
    486c:	a009883a 	mov	r4,r20
    4870:	103ee83a 	callr	r2
    4874:	103fe71e 	bne	r2,zero,4814 <_gp+0xffff777c>
    4878:	85a1883a 	add	r16,r16,r22
    487c:	e02d883a 	mov	r22,fp
    4880:	00001106 	br	48c8 <___vfprintf_internal_r+0x4e4>
    4884:	00c00044 	movi	r3,1
    4888:	04ffffc4 	movi	r19,-1
    488c:	d8000e15 	stw	zero,56(sp)
    4890:	d8c00a15 	stw	r3,40(sp)
    4894:	05400284 	movi	r21,10
    4898:	9825883a 	mov	r18,r19
    489c:	d8000c15 	stw	zero,48(sp)
    48a0:	d8000b15 	stw	zero,44(sp)
    48a4:	182f883a 	mov	r23,r3
    48a8:	00000806 	br	48cc <___vfprintf_internal_r+0x4e8>
    48ac:	ddc00b15 	stw	r23,44(sp)
    48b0:	05c00084 	movi	r23,2
    48b4:	00000506 	br	48cc <___vfprintf_internal_r+0x4e8>
    48b8:	00c00044 	movi	r3,1
    48bc:	d8c00c15 	stw	r3,48(sp)
    48c0:	05c000c4 	movi	r23,3
    48c4:	00000106 	br	48cc <___vfprintf_internal_r+0x4e8>
    48c8:	002f883a 	mov	r23,zero
    48cc:	d8c00f17 	ldw	r3,60(sp)
    48d0:	18c00044 	addi	r3,r3,1
    48d4:	d8c00f15 	stw	r3,60(sp)
    48d8:	003edc06 	br	444c <_gp+0xffff73b4>
    48dc:	8005883a 	mov	r2,r16
    48e0:	dfc01a17 	ldw	ra,104(sp)
    48e4:	df001917 	ldw	fp,100(sp)
    48e8:	ddc01817 	ldw	r23,96(sp)
    48ec:	dd801717 	ldw	r22,92(sp)
    48f0:	dd401617 	ldw	r21,88(sp)
    48f4:	dd001517 	ldw	r20,84(sp)
    48f8:	dcc01417 	ldw	r19,80(sp)
    48fc:	dc801317 	ldw	r18,76(sp)
    4900:	dc401217 	ldw	r17,72(sp)
    4904:	dc001117 	ldw	r16,68(sp)
    4908:	dec01b04 	addi	sp,sp,108
    490c:	f800283a 	ret

00004910 <__vfprintf_internal>:
    4910:	00800034 	movhi	r2,0
    4914:	10942704 	addi	r2,r2,20636
    4918:	300f883a 	mov	r7,r6
    491c:	280d883a 	mov	r6,r5
    4920:	200b883a 	mov	r5,r4
    4924:	11000017 	ldw	r4,0(r2)
    4928:	00043e41 	jmpi	43e4 <___vfprintf_internal_r>

0000492c <__sfvwrite_small_dev>:
    492c:	2880000b 	ldhu	r2,0(r5)
    4930:	1080020c 	andi	r2,r2,8
    4934:	10002126 	beq	r2,zero,49bc <__sfvwrite_small_dev+0x90>
    4938:	2880008f 	ldh	r2,2(r5)
    493c:	defffa04 	addi	sp,sp,-24
    4940:	dc000015 	stw	r16,0(sp)
    4944:	dfc00515 	stw	ra,20(sp)
    4948:	dd000415 	stw	r20,16(sp)
    494c:	dcc00315 	stw	r19,12(sp)
    4950:	dc800215 	stw	r18,8(sp)
    4954:	dc400115 	stw	r17,4(sp)
    4958:	2821883a 	mov	r16,r5
    495c:	10001216 	blt	r2,zero,49a8 <__sfvwrite_small_dev+0x7c>
    4960:	2027883a 	mov	r19,r4
    4964:	3025883a 	mov	r18,r6
    4968:	3823883a 	mov	r17,r7
    496c:	05010004 	movi	r20,1024
    4970:	04400b0e 	bge	zero,r17,49a0 <__sfvwrite_small_dev+0x74>
    4974:	880f883a 	mov	r7,r17
    4978:	a440010e 	bge	r20,r17,4980 <__sfvwrite_small_dev+0x54>
    497c:	01c10004 	movi	r7,1024
    4980:	8140008f 	ldh	r5,2(r16)
    4984:	900d883a 	mov	r6,r18
    4988:	9809883a 	mov	r4,r19
    498c:	00049e40 	call	49e4 <_write_r>
    4990:	0080050e 	bge	zero,r2,49a8 <__sfvwrite_small_dev+0x7c>
    4994:	88a3c83a 	sub	r17,r17,r2
    4998:	90a5883a 	add	r18,r18,r2
    499c:	003ff406 	br	4970 <_gp+0xffff78d8>
    49a0:	0005883a 	mov	r2,zero
    49a4:	00000706 	br	49c4 <__sfvwrite_small_dev+0x98>
    49a8:	8080000b 	ldhu	r2,0(r16)
    49ac:	10801014 	ori	r2,r2,64
    49b0:	8080000d 	sth	r2,0(r16)
    49b4:	00bfffc4 	movi	r2,-1
    49b8:	00000206 	br	49c4 <__sfvwrite_small_dev+0x98>
    49bc:	00bfffc4 	movi	r2,-1
    49c0:	f800283a 	ret
    49c4:	dfc00517 	ldw	ra,20(sp)
    49c8:	dd000417 	ldw	r20,16(sp)
    49cc:	dcc00317 	ldw	r19,12(sp)
    49d0:	dc800217 	ldw	r18,8(sp)
    49d4:	dc400117 	ldw	r17,4(sp)
    49d8:	dc000017 	ldw	r16,0(sp)
    49dc:	dec00604 	addi	sp,sp,24
    49e0:	f800283a 	ret

000049e4 <_write_r>:
    49e4:	defffd04 	addi	sp,sp,-12
    49e8:	dc000015 	stw	r16,0(sp)
    49ec:	04000034 	movhi	r16,0
    49f0:	dc400115 	stw	r17,4(sp)
    49f4:	84146904 	addi	r16,r16,20900
    49f8:	2023883a 	mov	r17,r4
    49fc:	2809883a 	mov	r4,r5
    4a00:	300b883a 	mov	r5,r6
    4a04:	380d883a 	mov	r6,r7
    4a08:	dfc00215 	stw	ra,8(sp)
    4a0c:	80000015 	stw	zero,0(r16)
    4a10:	0004e180 	call	4e18 <write>
    4a14:	00ffffc4 	movi	r3,-1
    4a18:	10c0031e 	bne	r2,r3,4a28 <_write_r+0x44>
    4a1c:	80c00017 	ldw	r3,0(r16)
    4a20:	18000126 	beq	r3,zero,4a28 <_write_r+0x44>
    4a24:	88c00015 	stw	r3,0(r17)
    4a28:	dfc00217 	ldw	ra,8(sp)
    4a2c:	dc400117 	ldw	r17,4(sp)
    4a30:	dc000017 	ldw	r16,0(sp)
    4a34:	dec00304 	addi	sp,sp,12
    4a38:	f800283a 	ret

00004a3c <__divsi3>:
    4a3c:	20001b16 	blt	r4,zero,4aac <__divsi3+0x70>
    4a40:	000f883a 	mov	r7,zero
    4a44:	28001616 	blt	r5,zero,4aa0 <__divsi3+0x64>
    4a48:	200d883a 	mov	r6,r4
    4a4c:	29001a2e 	bgeu	r5,r4,4ab8 <__divsi3+0x7c>
    4a50:	00800804 	movi	r2,32
    4a54:	00c00044 	movi	r3,1
    4a58:	00000106 	br	4a60 <__divsi3+0x24>
    4a5c:	10000d26 	beq	r2,zero,4a94 <__divsi3+0x58>
    4a60:	294b883a 	add	r5,r5,r5
    4a64:	10bfffc4 	addi	r2,r2,-1
    4a68:	18c7883a 	add	r3,r3,r3
    4a6c:	293ffb36 	bltu	r5,r4,4a5c <_gp+0xffff79c4>
    4a70:	0005883a 	mov	r2,zero
    4a74:	18000726 	beq	r3,zero,4a94 <__divsi3+0x58>
    4a78:	0005883a 	mov	r2,zero
    4a7c:	31400236 	bltu	r6,r5,4a88 <__divsi3+0x4c>
    4a80:	314dc83a 	sub	r6,r6,r5
    4a84:	10c4b03a 	or	r2,r2,r3
    4a88:	1806d07a 	srli	r3,r3,1
    4a8c:	280ad07a 	srli	r5,r5,1
    4a90:	183ffa1e 	bne	r3,zero,4a7c <_gp+0xffff79e4>
    4a94:	38000126 	beq	r7,zero,4a9c <__divsi3+0x60>
    4a98:	0085c83a 	sub	r2,zero,r2
    4a9c:	f800283a 	ret
    4aa0:	014bc83a 	sub	r5,zero,r5
    4aa4:	39c0005c 	xori	r7,r7,1
    4aa8:	003fe706 	br	4a48 <_gp+0xffff79b0>
    4aac:	0109c83a 	sub	r4,zero,r4
    4ab0:	01c00044 	movi	r7,1
    4ab4:	003fe306 	br	4a44 <_gp+0xffff79ac>
    4ab8:	00c00044 	movi	r3,1
    4abc:	003fee06 	br	4a78 <_gp+0xffff79e0>

00004ac0 <__modsi3>:
    4ac0:	20001716 	blt	r4,zero,4b20 <__modsi3+0x60>
    4ac4:	000f883a 	mov	r7,zero
    4ac8:	2005883a 	mov	r2,r4
    4acc:	28001216 	blt	r5,zero,4b18 <__modsi3+0x58>
    4ad0:	2900162e 	bgeu	r5,r4,4b2c <__modsi3+0x6c>
    4ad4:	01800804 	movi	r6,32
    4ad8:	00c00044 	movi	r3,1
    4adc:	00000106 	br	4ae4 <__modsi3+0x24>
    4ae0:	30000a26 	beq	r6,zero,4b0c <__modsi3+0x4c>
    4ae4:	294b883a 	add	r5,r5,r5
    4ae8:	31bfffc4 	addi	r6,r6,-1
    4aec:	18c7883a 	add	r3,r3,r3
    4af0:	293ffb36 	bltu	r5,r4,4ae0 <_gp+0xffff7a48>
    4af4:	18000526 	beq	r3,zero,4b0c <__modsi3+0x4c>
    4af8:	1806d07a 	srli	r3,r3,1
    4afc:	11400136 	bltu	r2,r5,4b04 <__modsi3+0x44>
    4b00:	1145c83a 	sub	r2,r2,r5
    4b04:	280ad07a 	srli	r5,r5,1
    4b08:	183ffb1e 	bne	r3,zero,4af8 <_gp+0xffff7a60>
    4b0c:	38000126 	beq	r7,zero,4b14 <__modsi3+0x54>
    4b10:	0085c83a 	sub	r2,zero,r2
    4b14:	f800283a 	ret
    4b18:	014bc83a 	sub	r5,zero,r5
    4b1c:	003fec06 	br	4ad0 <_gp+0xffff7a38>
    4b20:	0109c83a 	sub	r4,zero,r4
    4b24:	01c00044 	movi	r7,1
    4b28:	003fe706 	br	4ac8 <_gp+0xffff7a30>
    4b2c:	00c00044 	movi	r3,1
    4b30:	003ff106 	br	4af8 <_gp+0xffff7a60>

00004b34 <__udivsi3>:
    4b34:	200d883a 	mov	r6,r4
    4b38:	2900152e 	bgeu	r5,r4,4b90 <__udivsi3+0x5c>
    4b3c:	28001416 	blt	r5,zero,4b90 <__udivsi3+0x5c>
    4b40:	00800804 	movi	r2,32
    4b44:	00c00044 	movi	r3,1
    4b48:	00000206 	br	4b54 <__udivsi3+0x20>
    4b4c:	10000e26 	beq	r2,zero,4b88 <__udivsi3+0x54>
    4b50:	28000516 	blt	r5,zero,4b68 <__udivsi3+0x34>
    4b54:	294b883a 	add	r5,r5,r5
    4b58:	10bfffc4 	addi	r2,r2,-1
    4b5c:	18c7883a 	add	r3,r3,r3
    4b60:	293ffa36 	bltu	r5,r4,4b4c <_gp+0xffff7ab4>
    4b64:	18000826 	beq	r3,zero,4b88 <__udivsi3+0x54>
    4b68:	0005883a 	mov	r2,zero
    4b6c:	31400236 	bltu	r6,r5,4b78 <__udivsi3+0x44>
    4b70:	314dc83a 	sub	r6,r6,r5
    4b74:	10c4b03a 	or	r2,r2,r3
    4b78:	1806d07a 	srli	r3,r3,1
    4b7c:	280ad07a 	srli	r5,r5,1
    4b80:	183ffa1e 	bne	r3,zero,4b6c <_gp+0xffff7ad4>
    4b84:	f800283a 	ret
    4b88:	0005883a 	mov	r2,zero
    4b8c:	f800283a 	ret
    4b90:	00c00044 	movi	r3,1
    4b94:	003ff406 	br	4b68 <_gp+0xffff7ad0>

00004b98 <__umodsi3>:
    4b98:	2005883a 	mov	r2,r4
    4b9c:	2900122e 	bgeu	r5,r4,4be8 <__umodsi3+0x50>
    4ba0:	28001116 	blt	r5,zero,4be8 <__umodsi3+0x50>
    4ba4:	01800804 	movi	r6,32
    4ba8:	00c00044 	movi	r3,1
    4bac:	00000206 	br	4bb8 <__umodsi3+0x20>
    4bb0:	30000c26 	beq	r6,zero,4be4 <__umodsi3+0x4c>
    4bb4:	28000516 	blt	r5,zero,4bcc <__umodsi3+0x34>
    4bb8:	294b883a 	add	r5,r5,r5
    4bbc:	31bfffc4 	addi	r6,r6,-1
    4bc0:	18c7883a 	add	r3,r3,r3
    4bc4:	293ffa36 	bltu	r5,r4,4bb0 <_gp+0xffff7b18>
    4bc8:	18000626 	beq	r3,zero,4be4 <__umodsi3+0x4c>
    4bcc:	1806d07a 	srli	r3,r3,1
    4bd0:	11400136 	bltu	r2,r5,4bd8 <__umodsi3+0x40>
    4bd4:	1145c83a 	sub	r2,r2,r5
    4bd8:	280ad07a 	srli	r5,r5,1
    4bdc:	183ffb1e 	bne	r3,zero,4bcc <_gp+0xffff7b34>
    4be0:	f800283a 	ret
    4be4:	f800283a 	ret
    4be8:	00c00044 	movi	r3,1
    4bec:	003ff706 	br	4bcc <_gp+0xffff7b34>

00004bf0 <__mulsi3>:
    4bf0:	0005883a 	mov	r2,zero
    4bf4:	20000726 	beq	r4,zero,4c14 <__mulsi3+0x24>
    4bf8:	20c0004c 	andi	r3,r4,1
    4bfc:	2008d07a 	srli	r4,r4,1
    4c00:	18000126 	beq	r3,zero,4c08 <__mulsi3+0x18>
    4c04:	1145883a 	add	r2,r2,r5
    4c08:	294b883a 	add	r5,r5,r5
    4c0c:	203ffa1e 	bne	r4,zero,4bf8 <_gp+0xffff7b60>
    4c10:	f800283a 	ret
    4c14:	f800283a 	ret

00004c18 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    4c18:	0004ca41 	jmpi	4ca4 <alt_iic_isr_register>

00004c1c <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4c1c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4c20:	00bfff84 	movi	r2,-2
    4c24:	2084703a 	and	r2,r4,r2
    4c28:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    4c2c:	00c00044 	movi	r3,1
    4c30:	d0a04417 	ldw	r2,-32496(gp)
    4c34:	194a983a 	sll	r5,r3,r5
    4c38:	288ab03a 	or	r5,r5,r2
    4c3c:	d1604415 	stw	r5,-32496(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    4c40:	d0a04417 	ldw	r2,-32496(gp)
    4c44:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4c48:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    4c4c:	0005883a 	mov	r2,zero
    4c50:	f800283a 	ret

00004c54 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4c54:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4c58:	00bfff84 	movi	r2,-2
    4c5c:	2084703a 	and	r2,r4,r2
    4c60:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    4c64:	00ffff84 	movi	r3,-2
    4c68:	d0a04417 	ldw	r2,-32496(gp)
    4c6c:	194a183a 	rol	r5,r3,r5
    4c70:	288a703a 	and	r5,r5,r2
    4c74:	d1604415 	stw	r5,-32496(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    4c78:	d0a04417 	ldw	r2,-32496(gp)
    4c7c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4c80:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    4c84:	0005883a 	mov	r2,zero
    4c88:	f800283a 	ret

00004c8c <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    4c8c:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    4c90:	00800044 	movi	r2,1
    4c94:	1144983a 	sll	r2,r2,r5
    4c98:	10c4703a 	and	r2,r2,r3
}
    4c9c:	1004c03a 	cmpne	r2,r2,zero
    4ca0:	f800283a 	ret

00004ca4 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    4ca4:	00c007c4 	movi	r3,31
    4ca8:	19401616 	blt	r3,r5,4d04 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    4cac:	defffe04 	addi	sp,sp,-8
    4cb0:	dfc00115 	stw	ra,4(sp)
    4cb4:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4cb8:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4cbc:	00ffff84 	movi	r3,-2
    4cc0:	80c6703a 	and	r3,r16,r3
    4cc4:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    4cc8:	280490fa 	slli	r2,r5,3
    4ccc:	00c00034 	movhi	r3,0
    4cd0:	18d46f04 	addi	r3,r3,20924
    4cd4:	1885883a 	add	r2,r3,r2
    4cd8:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    4cdc:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    4ce0:	30000226 	beq	r6,zero,4cec <alt_iic_isr_register+0x48>
    4ce4:	0004c1c0 	call	4c1c <alt_ic_irq_enable>
    4ce8:	00000106 	br	4cf0 <alt_iic_isr_register+0x4c>
    4cec:	0004c540 	call	4c54 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4cf0:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    4cf4:	dfc00117 	ldw	ra,4(sp)
    4cf8:	dc000017 	ldw	r16,0(sp)
    4cfc:	dec00204 	addi	sp,sp,8
    4d00:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
    4d04:	00bffa84 	movi	r2,-22
    4d08:	f800283a 	ret

00004d0c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    4d0c:	deffff04 	addi	sp,sp,-4
    4d10:	01000034 	movhi	r4,0
    4d14:	01400034 	movhi	r5,0
    4d18:	dfc00015 	stw	ra,0(sp)
    4d1c:	2113ee04 	addi	r4,r4,20408
    4d20:	29542b04 	addi	r5,r5,20652

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    4d24:	2140061e 	bne	r4,r5,4d40 <alt_load+0x34>
    4d28:	01000034 	movhi	r4,0
    4d2c:	01400034 	movhi	r5,0
    4d30:	21100804 	addi	r4,r4,16416
    4d34:	29500804 	addi	r5,r5,16416
    4d38:	2140121e 	bne	r4,r5,4d84 <alt_load+0x78>
    4d3c:	00000b06 	br	4d6c <alt_load+0x60>
    4d40:	00c00034 	movhi	r3,0
    4d44:	18d42b04 	addi	r3,r3,20652
    4d48:	1907c83a 	sub	r3,r3,r4
    4d4c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    4d50:	10fff526 	beq	r2,r3,4d28 <_gp+0xffff7c90>
    {
      *to++ = *from++;
    4d54:	114f883a 	add	r7,r2,r5
    4d58:	39c00017 	ldw	r7,0(r7)
    4d5c:	110d883a 	add	r6,r2,r4
    4d60:	10800104 	addi	r2,r2,4
    4d64:	31c00015 	stw	r7,0(r6)
    4d68:	003ff906 	br	4d50 <_gp+0xffff7cb8>
    4d6c:	01000034 	movhi	r4,0
    4d70:	01400034 	movhi	r5,0
    4d74:	2113d504 	addi	r4,r4,20308
    4d78:	2953d504 	addi	r5,r5,20308

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    4d7c:	2140101e 	bne	r4,r5,4dc0 <alt_load+0xb4>
    4d80:	00000b06 	br	4db0 <alt_load+0xa4>
    4d84:	00c00034 	movhi	r3,0
    4d88:	18d06004 	addi	r3,r3,16768
    4d8c:	1907c83a 	sub	r3,r3,r4
    4d90:	0005883a 	mov	r2,zero
  {
    while( to != end )
    4d94:	10fff526 	beq	r2,r3,4d6c <_gp+0xffff7cd4>
    {
      *to++ = *from++;
    4d98:	114f883a 	add	r7,r2,r5
    4d9c:	39c00017 	ldw	r7,0(r7)
    4da0:	110d883a 	add	r6,r2,r4
    4da4:	10800104 	addi	r2,r2,4
    4da8:	31c00015 	stw	r7,0(r6)
    4dac:	003ff906 	br	4d94 <_gp+0xffff7cfc>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    4db0:	0004ed00 	call	4ed0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    4db4:	dfc00017 	ldw	ra,0(sp)
    4db8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    4dbc:	0004ed41 	jmpi	4ed4 <alt_icache_flush_all>
    4dc0:	00c00034 	movhi	r3,0
    4dc4:	18d3ee04 	addi	r3,r3,20408
    4dc8:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    4dcc:	0005883a 	mov	r2,zero
  {
    while( to != end )
    4dd0:	18bff726 	beq	r3,r2,4db0 <_gp+0xffff7d18>
    {
      *to++ = *from++;
    4dd4:	114f883a 	add	r7,r2,r5
    4dd8:	39c00017 	ldw	r7,0(r7)
    4ddc:	110d883a 	add	r6,r2,r4
    4de0:	10800104 	addi	r2,r2,4
    4de4:	31c00015 	stw	r7,0(r6)
    4de8:	003ff906 	br	4dd0 <_gp+0xffff7d38>

00004dec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4dec:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4df0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4df4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4df8:	0004e780 	call	4e78 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    4dfc:	0004e980 	call	4e98 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    4e00:	d1a04517 	ldw	r6,-32492(gp)
    4e04:	d1604617 	ldw	r5,-32488(gp)
    4e08:	d1204717 	ldw	r4,-32484(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    4e0c:	dfc00017 	ldw	ra,0(sp)
    4e10:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    4e14:	00042181 	jmpi	4218 <main>

00004e18 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    4e18:	00800044 	movi	r2,1
    4e1c:	20800226 	beq	r4,r2,4e28 <write+0x10>
    4e20:	00800084 	movi	r2,2
    4e24:	2080041e 	bne	r4,r2,4e38 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    4e28:	01000034 	movhi	r4,0
    4e2c:	000f883a 	mov	r7,zero
    4e30:	21142904 	addi	r4,r4,20644
    4e34:	0004e9c1 	jmpi	4e9c <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    4e38:	d0a00417 	ldw	r2,-32752(gp)
    4e3c:	10000926 	beq	r2,zero,4e64 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    4e40:	deffff04 	addi	sp,sp,-4
    4e44:	dfc00015 	stw	ra,0(sp)
    4e48:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    4e4c:	00c01444 	movi	r3,81
    4e50:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    4e54:	00bfffc4 	movi	r2,-1
    4e58:	dfc00017 	ldw	ra,0(sp)
    4e5c:	dec00104 	addi	sp,sp,4
    4e60:	f800283a 	ret
    4e64:	d0a04304 	addi	r2,gp,-32500
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    4e68:	00c01444 	movi	r3,81
    4e6c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    4e70:	00bfffc4 	movi	r2,-1
    4e74:	f800283a 	ret

00004e78 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    4e78:	deffff04 	addi	sp,sp,-4
    4e7c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    4e80:	0004f4c0 	call	4f4c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    4e84:	00800044 	movi	r2,1
    4e88:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    4e8c:	dfc00017 	ldw	ra,0(sp)
    4e90:	dec00104 	addi	sp,sp,4
    4e94:	f800283a 	ret

00004e98 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    4e98:	f800283a 	ret

00004e9c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    4e9c:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    4ea0:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    4ea4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    4ea8:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    4eac:	2980072e 	bgeu	r5,r6,4ecc <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    4eb0:	38c00037 	ldwio	r3,0(r7)
    4eb4:	18ffffec 	andhi	r3,r3,65535
    4eb8:	183ffc26 	beq	r3,zero,4eac <_gp+0xffff7e14>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    4ebc:	28c00007 	ldb	r3,0(r5)
    4ec0:	20c00035 	stwio	r3,0(r4)
    4ec4:	29400044 	addi	r5,r5,1
    4ec8:	003ff806 	br	4eac <_gp+0xffff7e14>

  return count;
}
    4ecc:	f800283a 	ret

00004ed0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    4ed0:	f800283a 	ret

00004ed4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    4ed4:	f800283a 	ret

00004ed8 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    4ed8:	213ffe84 	addi	r4,r4,-6
    4edc:	008003c4 	movi	r2,15
    4ee0:	11001636 	bltu	r2,r4,4f3c <alt_exception_cause_generated_bad_addr+0x64>
    4ee4:	200890ba 	slli	r4,r4,2
    4ee8:	00800034 	movhi	r2,0
    4eec:	1093bf04 	addi	r2,r2,20220
    4ef0:	2089883a 	add	r4,r4,r2
    4ef4:	20800017 	ldw	r2,0(r4)
    4ef8:	1000683a 	jmp	r2
    4efc:	00004f44 	movi	zero,317
    4f00:	00004f44 	movi	zero,317
    4f04:	00004f3c 	xorhi	zero,zero,316
    4f08:	00004f3c 	xorhi	zero,zero,316
    4f0c:	00004f3c 	xorhi	zero,zero,316
    4f10:	00004f44 	movi	zero,317
    4f14:	00004f3c 	xorhi	zero,zero,316
    4f18:	00004f3c 	xorhi	zero,zero,316
    4f1c:	00004f44 	movi	zero,317
    4f20:	00004f44 	movi	zero,317
    4f24:	00004f3c 	xorhi	zero,zero,316
    4f28:	00004f44 	movi	zero,317
    4f2c:	00004f3c 	xorhi	zero,zero,316
    4f30:	00004f3c 	xorhi	zero,zero,316
    4f34:	00004f3c 	xorhi	zero,zero,316
    4f38:	00004f44 	movi	zero,317
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    4f3c:	0005883a 	mov	r2,zero
    4f40:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    4f44:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    4f48:	f800283a 	ret

00004f4c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    4f4c:	000170fa 	wrctl	ienable,zero
    4f50:	f800283a 	ret
